{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\crist\\\\OneDrive\\\\Escritorio\\\\curso_de_react\\\\practicas\\\\lista_tareas\\\\src\\\\componentes\\\\ListaTareas.js\";\nimport React from 'react';\nimport Tarea from './Tarea';\n\n// La lista va a ser el contenedor\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListaTareas = _ref => {\n  let {\n    tareas,\n    cambiarTareas\n  } = _ref;\n  const toggleCompletada = id => {\n    cambiarTareas(tareas.map(tarea => {\n      // ejecutamos codigo por cada tarea\n      // si el id de tarea es igual al id que ingresamos entonces\n      if (tarea.id === id) {\n        // retornamos tarea, con todas sus propiedas pero queremos modificar completada\n        // donde completada sera igual (igual se escribe con dos puntos :)\n        // sera igual a distinto de !tarea.completada \n        // al usar ! si es true pasara a false, si es false pasara a true\n        return {\n          ...tarea,\n          completada: !tarea.completada,\n          id\n        };\n      }\n      return tarea;\n    }));\n  };\n  return (\n    /*#__PURE__*/\n    // se le agrega la clase para poder editarlo con css\n    _jsxDEV(\"ul\", {\n      className: \"lista-tareas\",\n      children:\n      // asi se revisa, si tareas es mayor a 0 entonces mostrara la lista de tareas\n      tareas.length > 0 ? tareas.map(tarea => {\n        /* debe retornar algo, en este caso seria un li, con el, dato tarea que esta en app y de esa \r\n        funcion extraemos el texto Para que no de error, debe tener un id cada linea de tarea, \r\n        asi que se extrae el id asi: tarea.id*/\n        // Retornamos el componente tarea, el cual tendra almacenada las tareas\n        return /*#__PURE__*/_jsxDEV(Tarea, {\n          //le damos la propiedad tarea para que se pueda usar en el componente Tarea\n          tarea: tarea,\n          toggleCompletada: toggleCompletada\n        }, tarea.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 28\n        }, this);\n      }) :\n      /*#__PURE__*/\n      // si es menor a 0 entonces mostrara el siguiente mensaje\n      _jsxDEV(\"div\", {\n        className: \"lista-tareas__mensaje\",\n        children: \"No hay tareas agregadas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)\n  );\n};\n_c = ListaTareas;\nexport default ListaTareas;\nvar _c;\n$RefreshReg$(_c, \"ListaTareas\");","map":{"version":3,"names":["React","Tarea","ListaTareas","tareas","cambiarTareas","toggleCompletada","id","map","tarea","completada","length"],"sources":["C:/Users/crist/OneDrive/Escritorio/curso_de_react/practicas/lista_tareas/src/componentes/ListaTareas.js"],"sourcesContent":["import React from 'react';\r\nimport Tarea from './Tarea';\r\n\r\n\r\n// La lista va a ser el contenedor\r\nconst ListaTareas = ({ tareas,cambiarTareas }) => {\r\n    const toggleCompletada = (id)=>{\r\n        cambiarTareas(tareas.map((tarea)=>{\r\n            // ejecutamos codigo por cada tarea\r\n            // si el id de tarea es igual al id que ingresamos entonces\r\n            if(tarea.id === id){\r\n                // retornamos tarea, con todas sus propiedas pero queremos modificar completada\r\n                // donde completada sera igual (igual se escribe con dos puntos :)\r\n                // sera igual a distinto de !tarea.completada \r\n                // al usar ! si es true pasara a false, si es false pasara a true\r\n                return {...tarea, completada: !tarea.completada, id}\r\n            }\r\n            return tarea;\r\n        }));\r\n    }\r\n    return (\r\n        // se le agrega la clase para poder editarlo con css\r\n        <ul className='lista-tareas'>\r\n            {/* de tareas se usa .map para que recorra todas las tareas*/}\r\n\r\n            { // asi se revisa, si tareas es mayor a 0 entonces mostrara la lista de tareas\r\n                tareas.length > 0 ? tareas.map((tarea) => {\r\n                    /* debe retornar algo, en este caso seria un li, con el, dato tarea que esta en app y de esa \r\n                    funcion extraemos el texto Para que no de error, debe tener un id cada linea de tarea, \r\n                    asi que se extrae el id asi: tarea.id*/\r\n                    // Retornamos el componente tarea, el cual tendra almacenada las tareas\r\n                    return <Tarea\r\n                        key={tarea.id}\r\n                        //le damos la propiedad tarea para que se pueda usar en el componente Tarea\r\n                        tarea={tarea} \r\n                        toggleCompletada={toggleCompletada}\r\n                        />\r\n                })\r\n                    :\r\n                    // si es menor a 0 entonces mostrara el siguiente mensaje\r\n                    <div className='lista-tareas__mensaje'>No hay tareas agregadas</div>\r\n\r\n            }\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default ListaTareas;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,SAAS;;AAG3B;AAAA;AACA,MAAMC,WAAW,GAAG,QAA8B;EAAA,IAA7B;IAAEC,MAAM;IAACC;EAAc,CAAC;EACzC,MAAMC,gBAAgB,GAAIC,EAAE,IAAG;IAC3BF,aAAa,CAACD,MAAM,CAACI,GAAG,CAAEC,KAAK,IAAG;MAC9B;MACA;MACA,IAAGA,KAAK,CAACF,EAAE,KAAKA,EAAE,EAAC;QACf;QACA;QACA;QACA;QACA,OAAO;UAAC,GAAGE,KAAK;UAAEC,UAAU,EAAE,CAACD,KAAK,CAACC,UAAU;UAAEH;QAAE,CAAC;MACxD;MACA,OAAOE,KAAK;IAChB,CAAC,CAAC,CAAC;EACP,CAAC;EACD;IAAA;IACI;IACA;MAAI,SAAS,EAAC,cAAc;MAAA;MAGtB;MACEL,MAAM,CAACO,MAAM,GAAG,CAAC,GAAGP,MAAM,CAACI,GAAG,CAAEC,KAAK,IAAK;QACtC;AACpB;AACA;QACoB;QACA,oBAAO,QAAC,KAAK;UAET;UACA,KAAK,EAAEA,KAAM;UACb,gBAAgB,EAAEH;QAAiB,GAH9BG,KAAK,CAACF,EAAE;UAAA;UAAA;UAAA;QAAA,QAIX;MACV,CAAC,CAAC;MAAA;MAEE;MACA;QAAK,SAAS,EAAC,uBAAuB;QAAA,UAAC;MAAuB;QAAA;QAAA;QAAA;MAAA;IAAM;MAAA;MAAA;MAAA;IAAA;EAG3E;AAEb,CAAC;AAAA,KAxCKJ,WAAW;AA0CjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}